---
// This component only renders the Three.js starfield background
---

{/* Three.js Canvas Container - Fixed position, behind everything */}
<canvas id="starfield-canvas" class="fixed top-0 left-0 w-full h-full -z-10"></canvas>

<script>
  import * as THREE from 'three';

  // Ensure this runs only on the client
  if (typeof window !== 'undefined') {
    let scene, camera, renderer, stars;

    function init() {
      // Scene
      scene = new THREE.Scene();

      // Camera
      camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 1, 1000);
      camera.position.z = 1; // Start slightly back initially

      // Renderer
      const canvas = document.getElementById('starfield-canvas'); // Use the new ID
      if (!canvas) {
        console.error("Starfield canvas element not found!");
        return;
      }
      // Make renderer transparent to see potential body background
      renderer = new THREE.WebGLRenderer({ canvas: canvas, antialias: true, alpha: true });
      renderer.setSize(window.innerWidth, window.innerHeight);
      renderer.setPixelRatio(window.devicePixelRatio);
      renderer.setClearColor(0x000003, 1); // Dark space background (can be adjusted)

      // Starfield
      const starVertices = [];
      for (let i = 0; i < 10000; i++) {
        const x = THREE.MathUtils.randFloatSpread(2000);
        const y = THREE.MathUtils.randFloatSpread(2000);
        const z = THREE.MathUtils.randFloatSpread(2000);
        starVertices.push(x, y, z);
      }

      const starGeometry = new THREE.BufferGeometry();
      starGeometry.setAttribute('position', new THREE.Float32BufferAttribute(starVertices, 3));

      const starMaterial = new THREE.PointsMaterial({
        color: 0xffffff,
        size: 0.7,
        sizeAttenuation: true
      });

      stars = new THREE.Points(starGeometry, starMaterial);
      scene.add(stars);

      // Handle window resize
      window.addEventListener('resize', onWindowResize, false);

      // Start animation
      animate();
    }

    function onWindowResize() {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    }

    function animate() {
      requestAnimationFrame(animate);

      // Simple animation: rotate the starfield
      if (stars) {
        stars.rotation.x += 0.0001;
        stars.rotation.y += 0.0002;
      }

      renderer.render(scene, camera);
    }

    // Initialize after a short delay
    setTimeout(init, 100);
  }
</script>
